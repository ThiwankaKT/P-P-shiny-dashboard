}
x
a <- rep(NA,50)
for (i in 1:50) {
a[i] <- i^2
}
a
b <- rep(NA,50)
for (i in 1:50) {
j = 1
ifelse(i % 2 == 1, b[i] = -j, b[i] = j)
b <- rep(NA,50)
for (i in 1:50) {
j <- 1
ifelse(i % 2 == 1, b[i] <- -j, b[i] <- j)
b <- rep(NA,50)
j <- 0
for (i in 1:50) {
j <- 1
ifelse(i % 2 == 1, b[i] <- -j, b[i] <- j)
b <- rep(NA,50)
for (i in 1:50) {
j <- 1
if(i % 2 == 1){
b <- rep(NA,50)
for (i in 1:50) {
j <- 1
if(i %% 2 == 1){
b[i] <- -j
} else{
b[i] <- j
}
}
b
c <- rep(NA,70)
for (i in 1:70) {
j <- 1
if(i %% 2 == 1){
b[i] <- j
} else{
b[i] <- -j
}
}
c
c <- rep(NA,70)
for (i in 1:70) {
j <- 1
if(i %% 2 == 1){
c[i] <- j
} else{
c[i] <- -j
}
}
c
knitr::opts_chunk$set(echo = TRUE)
current_balance <- 0
deposit_value <- 500
count <- 0
while(current_balance <= 10000){
current_balance <- current_balance + deposit
count <- count + 1
}
count
current_balance <- 0
deposit_value <- 500
count <- 0
while(current_balance <= 10000){
current_balance <- current_balance + deposit
count <- count + 1
}
count
current_balance <- 0
deposit_value <- 500
count <- 0
while(current_balance <= 10000){
current_balance <- current_balance + deposit_value
count <- count + 1
}
count
current_balance <- 0
deposit_value <- 500
count <- 0
while(current_balance < 10000){
current_balance <- current_balance + deposit_value
count <- count + 1
}
count
fun.new <- function(x){x <- x + 2}
lapply(0:48, fun.new)
fun.new <- function(x){x <- x + 2}
lapply(seq(0,48,2), fun.new)
knitr::opts_chunk$set(echo = TRUE)
data <- data.frame(
First_Name = c("John", "Alice", "Bob"),
Last_Name = c("Doe", "Smith", "Johnson"),
Age = c(22, 25, 35)
)
View(data)
data <- data %>%
unite(Full_Name, First_Name, Last_Name, sep = " ")
#rm(list = ls()) #Remove all objects from the workspace
if(!require(tidyr)) install.packages("tidyr")
library(tidyr)
data <- data %>%
unite(Full_Name, First_Name, Last_Name, sep = " ")
data <- data %>%
spread(Full_Name, First_Name, Last_Name, sep = " ")
data <- data %>%
seperate(Full_Name, First_Name, Last_Name, sep = " ")
data <- data %>%
separate(Full_Name, First_Name, Last_Name, sep = " ")
data <- data.frame(
First_Name = c("John", "Alice", "Bob"),
Last_Name = c("Doe", "Smith", "Johnson"),
Age = c(22, 25, 35)
)
data <- data %>%
unite(Full_Name, First_Name, Last_Name, sep = " ")
View(data)
data <- data %>%
separate(Full_Name, First_Name, Last_Name, sep = " ")
data <- data %>%
separate(Full_Name, c(First_Name, Last_Name), sep = " ")
data <- data %>%
separate(Full_Name, c("First_Name", "Last_Name"), sep = " ")
View(data)
n = 10
# creating a data frame
dataframe = data.frame(
S.No = c(1:n),
Group.1 = c(23, 345, 76, 212, 88,
199, 72, 35, 90, 265),
Group.2 = c(117, 89, 66, 334, 90,
101, 178, 233, 45, 200),
Group.3 = c(29, 101, 239, 289, 176,
320, 89, 109, 199, 56))
View(dataframe)
data_long <- dataframe %>%
gather(key = "Group", value = "Marks", -S.No)
View(data_long)
nchar("Data Science")
paste("Today","is","Friday")
paste("Today","is","Friday",sep = "-")
paste("Today","is:",13,"Friday")
Students <- c("Cox", "Gauss", "Bayes", "Fisher")
paste(Students, "loves Data Science")
paste(Students, "loves Data Science", sep = " ", collapse = " ")
fun.str <- function(s1,s2){
if(nchar(paste(s1,s2) > 10){
fun.str <- function(s1,s2){
if((nchar(paste(s1,s2)) > 10){
fun.str <- function(s1,s2){
if((nchar(paste(s1,s2))) > 10){
paste(s1,s2)
} else{
return("Combine them yourself, they are too short")
}
}
fun.str("dog","cat")
fun.str("umbrella","rain")
fun.str <- function(s1,s2){
if((nchar(paste(s1,s2))) > 10){
return(paste(s1,s2))
} else{
return("Combine them yourself, they are too short")
}
}
fun.str("umbrella","rain")
substring("Data Science",1,5)
substring(Students,1,2)
temp.str <- "Three times two equals to 6"
strsplit(temp.str," ")
path <- ".../home/data/ADSC1010/project.csv"
strsplit(path, "/")
s <- "Data science is fun. Data science is very useful."
sub("Data Science","Maths",s)
sub("Data Science","Maths",s)
sub("Data science","Maths",s)
s <- "Data science is fun. Data science is very useful."
gsub("Data science","Maths",s)
str <- "I study at TRU and I am excited for the winter."
nchar(str)
substring(str,1,14)
str1 <- substring(str,1,14)
str1
str2 <- substring(str,19,47)
str2
str2 <- substring(str,20,47)
str2
str2 <- sub("winter","summer",str2)
str2
paste(str2, " and ", str1)
str2 <- substring(str,20,46)
str2
str2 <- sub("winter","summer",str2)
str2
paste(str2, " and ", str1)
paste(str2, " and ", str1, ".")
paste0(str2, " and ", str1, ".")
locations <- c("NY", "LA", "CHI", "HOU")
treatments <- c("T1", "T2", "T3")
outer(locations,treatments,sep = "-")
outer(locations,treatments,paste, sep = "-")
outer(treatments,locations,paste,sep = "_")
Sys.Date()
today <- Sys.Date()
class(today)
today.1 <- "2024-10-11"
class(today.1)
format(Sys.Date())
as.character(Sys.Date())
format(Sys.Date(), format="%m/%d/%Y")
as.Date("2010-12-31")
as.Date("12/31/2010", format="%m/%d/%Y")
years <- c(2010, 2011, 2012, 2013, 2014)
months <- rep(1,5)
days <- c(3, 5, 8, 10, 23)
as.Date(years,months,days)
knitr::opts_chunk$set(echo = TRUE)
ISOdate(years,months,days)
as.Date(ISOdate(years,months,days))
d <- as.Date("2023-07-24")
p <- as.POSIXlt(d)
p
fun.ex1 <- function(str){
x = nchar(str)/2
str.1 <- substring(1,x)
str.2 <- substring(x+1, nchar(str))
return(paste0(str.2,str.1))
}
fun.ex1("Hello ADSC1010")
fun.ex1 <- function(str){
x = nchar(str)/2
str.1 <- substring(1,x)
str.2 <- substring(x+1, nchar(str))
return(paste0(str.2,str.1))
}
fun.ex1("Hello ADSC1010")
fun.ex1 <- function(str){
x = nchar(str)/2
str.1 <- substring(str,1,x)
str.2 <- substring(str,x+1, nchar(str))
return(paste0(str.2,str.1))
}
fun.ex1("Hello ADSC1010")
treat <- c("gold alloy","sintering")
factors <- c("Au 97-1-1-1","AuCa")
levels <- c(1500,1600,1700)
m <- outer(treat,factors, paste, sep = "-")
m
as.Date(ISOdate(years,months,days))
years <- c(2014, 2015, 2016, 2017, 2018)
months <- rep(1,5)
days <- c(3, 5, 8, 10, 23)
as.Date(ISOdate(years,months,days))
dateList <- as.Date(ISOdate(years,months,days))
dateList
difftime(dateList[5], dateList[1], units = "days")
difftime(dateList[4], dateList[2], units = "days")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) #Remove all objects from the workspace
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
data("mtcars")
View(mtcars)
new_mtcars <- mtcars %>%
select(mpg, cyl,hp, wt)
View(new_mtcars)
head(new_mtcars)
data("starwars")
force(starwars)
View(starwars)
starwars.1 <- starwars %>%
select(name, height,homeworld)
View(starwars.1)
starwars.2 <- starwars %>%
select(-vehicles,-starships)
View(starwars.2)
summary(mtcars$qsec)
fastcars <- mtcars %>%
filter(qsec <= 17)
View(fastcars)
starwars.3 <- starwars %>%
filter(species == "Human")
View(starwars.3)
mtcars <- mtcars %>%
mutate(kpl = mpg/2.352)
View(mtcars)
starwars.4 <- starwars %>%
mutate(BMI = weight/(height^2))
starwars.4 <- starwars %>%
mutate(BMI = mass/(height^2))
View(starwars.4)
mtcars <- mtcars %>%
arrange(mpg,cyl,-hp)
View(mtcars)
starwars.5 <- starwars %>%
arrange(-height)
View(starwars.5)
cars_summary <- mtcars %>%
summarise(Mean = mean(hp), Median = median(hp))
View(cars_summary)
BMI_summary <- starwars.4 %>%
arrange(-height) %>%
summarise(Mean = mean(na.omit(BMI)), Median = median(na.omit(BMI)),
Min = min(na.omit(BMI)), Max = max(na.omit(BMI)))
View(BMI_summary)
Blue_Humans <- starwars %>%
filter(species == "Human") %>%
filter(eye_color == "blue") %>%
summarise(Max_BMI = max(na.omit(BMI)))
Blue_Humans <- starwars.4 >%
Blue_Humans <- starwars.4 %>%
filter(species == "Human") %>%
filter(eye_color == "blue") %>%
summarise(Max_BMI = max(na.omit(BMI)))
View(Blue_Humans)
Cars_Averages <- mtcars %>%
group_by(cyl) %>%
summarise(avg_hp_cyl = mean(hp),
avg_mpg_cyl = mean(hp))
View(Cars_Averages)
Eye_color <- starwars %>%
group_by(eye_color) %>%
summarise(avg_height_eye_col = mean(na.omit(height)),
avg_weight_eye_col = mean(na.omit(mass)))
View(Eye_color)
Avg_disp <- mtcars %>%
filter(hp > 109) %>%
filter(cyl == max(cyl)) %>%
summarise(avg_disp = mean(disp))
View(Avg_disp)
set.seed(12)
# Create a small dataset of students (only interested in these students)
small_students <- data.frame(
StudentID = c(1, 2, 3, 4),
Name = c("Alice", "Bob", "Charlie", "Sean")
)
# Create a large dataset of courses with more students
large_courses <- data.frame(
CourseID = c(101, 102, 103, 104, 105),
CourseName = c("Math", "Science", "History", "English", "Art"),
StudentID = sample(1:15, 15)
)
View(small_students)
View(large_courses)
new_students <- small_students %>%
left_join(small_students,large_courses, by = "StudentID")
View(new_students)
Small_Grades <- left_join(small_students,large_courses, by = "StudentID")
Small_Grades
new_students <- small_students %>%
left_join(large_courses, by = "StudentID")
View(new_students)
View(Small_Grades)
Purchases <- read.csv("Purchases.csv")
Purchases <- read.csv("Purchases.csv")
Clients <- read.csv("Clients.csv")
View(Purchases)
View(Clients)
client_purchase <- Purchases %>%
rename(ID = Customer) %>%
left_join(Clients, by = "ID")
View(client_purchase)
client_purchase.2 <- Clients %>%
rename(Customer = ID) %>%
right_join(Purchases, by = "Customer")
View(client_purchase.2)
library(ggplot2)
data(mpg)
force(mpg)
View(mpg)
mpg.1 <- mpg %>%
filter(manufacturer == "ford") %>%
filter(year > 1999) %>%
summarise(avy_hwy = mean(na.omit(hwy)))
View(mpg.1)
mpg.2 <- mpg %>%
group_by(class) %>%
summarise(avy_cty = mean(na.omit(cty)),
avg_hwy = mean(na.omit(hwy)))
View(mpg.2)
mpg.3 <- mpg %>%
group_by(manufacturer) %>%
arrange(-hwy)
View(mpg.3)
mpg.3 <- mpg %>%
arrange(-hwy) %>%
group_by(manufacturer)
View(mpg.3)
knitr::opts_chunk$set(echo = TRUE)
Counties <- read.csv("Counties.csv")
View(Counties)
Counties <- Counties %>%
mutate(PercentCollegeGrads = (CollegeGraduate/Population) * 100)
ggplot(data=Counties, mapping = aes(x=PercentCollegeGrads, y = PercentPoverty, colour = region)) +
geom_point() +
geom_smooth() +
labs(
title = "Scatter plot of PercentPoverty by PercentCollegeGraduates",
x = "PercentCollegeGraduates",
y = "PercentPoverty"
)
Counties <- read.csv("Counties.csv")
Counties <- Counties %>%
mutate(PercentCollegeGrads = (CollegeGraduate/Population) * 100)
ggplot(data=Counties) +
geom_point(mapping = aes(x=PercentCollegeGrads, y = PercentPoverty, colour = region)) +
geom_smooth(mapping = aes(x=PercentCollegeGrads, y = PercentPoverty)) +
labs(
title = "Scatter plot of PercentPoverty by PercentCollegeGraduates",
x = "PercentCollegeGraduates",
y = "PercentPoverty"
)
Counties <- read.csv("Counties.csv")
Counties <- Counties %>%
mutate(PercentCollegeGrads = (CollegeGraduate/Population) * 100)
ggplot(data=Counties) +
geom_point(mapping = aes(x=PercentCollegeGrads, y = PercentPoverty, colour = region)) +
geom_smooth(mapping = aes(x=PercentCollegeGrads, y = PercentPoverty)) +
labs(
title = "Scatter plot of PercentPoverty by PercentCollegeGraduates",
x = "PercentCollegeGraduates",
y = "PercentPoverty",
colour = "Region"
)
Counties <- read.csv("Counties.csv")
Counties <- Counties %>%
mutate(PercentCollegeGrads = (CollegeGraduate/Population) * 100)
ggplot(data=Counties) +
geom_point(mapping = aes(x=PercentCollegeGrads, y = PercentPoverty, colour = region)) +
geom_smooth(mapping = aes(x=PercentCollegeGrads, y = PercentPoverty)) +
labs(
title = "Scatter plot of Percent Poverty by Percent College Graduates Coloured by State",
x = "Percent of College Graduates",
y = "Percent Poverty",
colour = "State"
)
New_Counties <- Counties %>%
filter(region == c("washington","idaho","montana","oregon"))
New_Counties <- Counties %>%
filter(region == "washington"|"idaho"|"montana"|"oregon")
New_Counties <- Counties %>%
filter(region %in% c("washington","idaho","montana","oregon"))
View(New_Counties)
Pop_Counties <- Counties %>%
select(-c(subregion, PercentPoverty))
View(Pop_Counties)
Pop_Counties <- Counties %>%
select(-c(subregion, PercentPoverty, PercentCollegeGrads))
Pop_Counties <- Counties %>%
select(-c(subregion, PercentPoverty, PercentCollegeGrads)) %>%
gather(key = "Education Level",value = "Population", -region)
View(Pop_Counties)
New_Counties <- Counties %>%
filter(region %in% c("washington","idaho","montana","oregon"))
Pop_Counties <- Counties %>%
select(-c(subregion, PercentPoverty, PercentCollegeGrads)) %>%
gather(key = "Education Level",value = "Population", -region)
View(Pop_Counties)
View(Counties)
New_Counties <- Counties %>%
filter(region %in% c("washington","idaho","montana","oregon"))
Pop_Counties <- Counties %>%
select(-c(subregion, Population, PercentPoverty, PercentCollegeGrads)) %>%
gather(key = "Education Level",value = "Population", -region)
View(Pop_Counties)
Pop_Counties <- Counties %>%
select(-c(subregion, Population, PercentPoverty, PercentCollegeGrads)) %>%
gather(key = "Education_Level",value = "Population", -region)
ggplot(data = Pop_Counties, mapping = aes(y = Population, x = region, fill = Education_Level))+
geom_col()
New_Counties <- Counties %>%
filter(region %in% c("washington","idaho","montana","oregon"))
Pop_Counties <- New_Counties %>%
select(-c(subregion, Population, PercentPoverty, PercentCollegeGrads)) %>%
gather(key = "Education_Level",value = "Population", -region)
ggplot(data = Pop_Counties, mapping = aes(y = Population, x = region, fill = Education_Level))+
geom_col()
New_Counties <- Counties %>%
filter(region %in% c("washington","idaho","montana","oregon"))
Pop_Counties <- New_Counties %>%
select(-c(subregion, Population, PercentPoverty, PercentCollegeGrads)) %>%
gather(key = "Education_Level",value = "Population", -region)
ggplot(data = Pop_Counties, mapping = aes(y = Population, x = region, fill = Education_Level))+
geom_col() +
labs(
title = "Barplot of Population by State Coloured by Education ",
x = "State",
y = "Population",
fill = "Education Level"
)
ggplot(data = Pop_Counties, mapping = aes(y = Population, x = region, fill = Education_Level))+
geom_col(position = "fill") +
labs(
title = "Barplot of Population by State Coloured by Education ",
x = "State",
y = "Population",
fill = "Education Level"
)
# Load the data
sales_data <- read.csv("Sales.csv")
shiny::runApp('D:/TRU/Fall 2024/ADSC1010_01 - Data VizManipulation/Lectures/17_Interactive Web Applications-20241208/Sample Apps/Sales_Data')
runApp('D:/TRU/Fall 2024/ADSC1010_01 - Data VizManipulation/Lectures/17_Interactive Web Applications-20241208/Sample Apps/Sales_Data')
setwd("D:/TRU/Fall 2024/ADSC1010_01 - Data VizManipulation/Lectures/17_Interactive Web Applications-20241208/Sample Apps/Sales_Data")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
